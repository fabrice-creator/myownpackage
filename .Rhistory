View(high_pass)
View(high_pass)
View(high_pass)
View(band_pass)
devtools::document()
devtools::document()
devtools::document()
library(basicfiltreR)
?cut_pass
Laguerre_poly <- function(order,x){
for (k in 0:order) {
polynom <- choose(order,k)*((-x)^k/factorial(k))
}
return(polynom)
}
poly <- Laguerre_poly(3,1)
print(poly)
poly <- Laguerre_poly(1,1)
print(poly)
library(testthat)
library(basicfiltreR)
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(basicfiltreR)
Laguerre_poly(1,1)
Laguerre_poly(5,1)
Laguerre_poly(0,0.5)
Laguerre_poly(2,0.5)
Laguerre_poly(2,-0.5)
Laguerre_poly(2,1)
signal <- sin(2 * pi * seq(0, 1, length.out = 100))
filtered_signal <- filter(signal, low_order = 2, high_order = 4)
length(signal)
length(filtered_signal)
filtered_signal <- filter(signal, low_order = -2, high_order = 4)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(basicfiltreR)
library(ggplot2)
time <- seq(0, 2, by = 0.002)  # 2 secondes de signal avec un intervalle de 2ms
ecg_signal <- sin(2 * pi * 1.2 * sqrt(time)) * cos(2 * pi * 60 * time)
set.seed(123)  # Pour la reproductibilité
# Ajouter du bruit blanc
white_noise <- rnorm(length(time), mean = 0, sd = 0.1)
# Ajouter du bruit basse fréquence (interférence de type "mouvements musculaires")
low_freq_noise <- 0.5 * sin(2 * pi * 0.5 * time)
# Signal ECG bruité
noisy_ecg <- ecg_signal + white_noise + low_freq_noise
ecg_data <- data.frame(Time = time, ECG = noisy_ecg)
ggplot(ecg_data, aes(x = Time, y = ECG)) +
geom_line() +
labs(title = "Signal ECG bruité", x = "Temps (s)", y = "Amplitude") +
theme_minimal()
filtered_signal <- filter(noisy_ecg,0,3)
ggplot(ecg_data, aes(x = Time, y = ECG)) +
geom_line() +
labs(title = "Signal ECG bruité", x = "Temps (s)", y = "Amplitude") +
theme_minimal()
ggplot(filtered_signal, aes(x = Time, y = ECG)) +
geom_line() +
labs(title = "Signal ECG bruité", x = "Temps (s)", y = "Amplitude") +
theme_minimal()
signal_data <- data.frame(Time=time,ECG=filtered_signal)
ggplot(signal_data, aes(x = Time, y = ECG)) +
geom_line() +
labs(title = "Signal ECG bruité", x = "Temps (s)", y = "Amplitude") +
theme_minimal()
filtered_signal <- band_stop(noisy_ecg,0,3)
signal_data <- data.frame(Time=time,ECG=filtered_signal)
ggplot(signal_data, aes(x = Time, y = ECG)) +
geom_line() +
labs(title = "Signal ECG bruité", x = "Temps (s)", y = "Amplitude") +
theme_minimal()
ggplot() +
geom_line(ecg_data, aes(x = Time, y = ECG)) +
geom_line(signal_data, aes(x = Time, y = ECG,color="darkblue"))+
labs(title = "Signal ECG bruité", x = "Temps (s)", y = "Amplitude") +
theme_minimal()
ggplot() +
geom_line(data=ecg_data, aes(x = Time, y = ECG)) +
geom_line(data=signal_data, aes(x = Time, y = ECG),color="darkblue")+
labs(title = "Signal ECG bruité", x = "Temps (s)", y = "Amplitude") +
theme_minimal()
filtered_signal <- band_stop(noisy_ecg,0,10)
signal_data <- data.frame(Time=time,ECG=filtered_signal)
ggplot() +
geom_line(data=ecg_data, aes(x = Time, y = ECG)) +
geom_line(data=signal_data, aes(x = Time, y = ECG),color="darkblue")+
labs(title = "Signal ECG bruité", x = "Temps (s)", y = "Amplitude") +
theme_minimal()
filtered_signal <- band_stop(noisy_ecg,5,10)
signal_data <- data.frame(Time=time,ECG=filtered_signal)
ggplot() +
geom_line(data=ecg_data, aes(x = Time, y = ECG)) +
geom_line(data=signal_data, aes(x = Time, y = ECG),color="darkblue")+
labs(title = "Signal ECG bruité", x = "Temps (s)", y = "Amplitude") +
theme_minimal()
library(ggplot2)
# Générer un signal ECG synthétique avec du bruit
set.seed(123)
time <- seq(0, 10, length.out = 1000)
ecg_signal <- sin(2 * pi * 1.7 * time) + 0.5 * sin(2 * pi * 3.5 * time)
noisy_ecg_signal <- ecg_signal + rnorm(length(ecg_signal), mean = 0, sd = 0.2)
# Fonction pour calculer les polynômes de Laguerre
Laguerre_poly <- function(order, x) {
sapply(0:order, function(k) choose(order, k) * (-x)^k / factorial(k))
}
# Approximation du signal en utilisant une série de Laguerre
approximate_signal <- function(signal, max_order) {
n <- length(signal)
approximation <- numeric(n)
for (i in 1:n) {
x <- i / n
for (k in 0:max_order) {
laguerre_value <- sum(Laguerre_poly(k, x))
approximation[i] <- approximation[i] + signal[i] * laguerre_value
}
}
return(approximation)
}
# Approximation de l'ECG bruité avec des polynômes de Laguerre
approx_signal <- approximate_signal(noisy_ecg_signal, max_order = 5)
# Visualisation
ggplot() +
geom_line(aes(x = time, y = noisy_ecg_signal), color = "red", alpha = 0.5, linetype = "dashed") +
geom_line(aes(x = time, y = approx_signal), color = "blue") +
labs(title = "Approximation d'un Signal ECG avec une Série de Laguerre",
x = "Temps", y = "Amplitude") +
theme_minimal()
# Filtre adaptatif basé sur des polynômes de Laguerre
adaptive_filter <- function(signal, base_order, adaptivity_factor) {
n <- length(signal)
filtered_signal <- numeric(n)
for (i in 1:n) {
# Calcul d'un ordre de Laguerre adaptatif basé sur la variance locale du signal
local_var <- var(signal[max(1, i - 10):min(n, i + 10)])  # Variance locale
dynamic_order <- min(base_order + round(adaptivity_factor * local_var), base_order + 5)
# Calcul du filtre avec les polynômes de Laguerre jusqu'à dynamic_order
x <- i / n
for (k in 0:dynamic_order) {
laguerre_value <- sum(Laguerre_poly(k, x))
filtered_signal[i] <- filtered_signal[i] + signal[i] * laguerre_value
}
filtered_signal[i] <- filtered_signal[i] / (dynamic_order + 1)
}
return(filtered_signal)
}
# Application du filtre adaptatif sur le signal ECG bruité
filtered_signal <- adaptive_filter(noisy_ecg_signal, base_order = 3, adaptivity_factor = 2)
# Visualisation du signal filtré
ggplot() +
geom_line(aes(x = time, y = noisy_ecg_signal), color = "red", alpha = 0.5, linetype = "dashed") +
geom_line(aes(x = time, y = filtered_signal), color = "blue") +
labs(title = "Filtrage Adaptatif d'un Signal ECG avec les Polynômes de Laguerre",
x = "Temps", y = "Amplitude") +
theme_minimal()
# Filtre adaptatif basé sur des polynômes de Laguerre
adaptive_filter <- function(signal, base_order, adaptivity_factor) {
n <- length(signal)
filtered_signal <- numeric(n)
for (i in 1:n) {
# Calcul d'un ordre de Laguerre adaptatif basé sur la variance locale du signal
local_var <- var(signal[max(1, i - 10):min(n, i + 10)])  # Variance locale
dynamic_order <- min(base_order + round(adaptivity_factor * local_var), base_order + 5)
# Calcul du filtre avec les polynômes de Laguerre jusqu'à dynamic_order
x <- i / n
for (k in 0:dynamic_order) {
laguerre_value <- sum(Laguerre_poly(k, x))
filtered_signal[i] <- filtered_signal[i] + signal[i] * laguerre_value
}
filtered_signal[i] <- filtered_signal[i] / (dynamic_order + 1)
}
return(filtered_signal)
}
# Application du filtre adaptatif sur le signal ECG bruité
filtered_signal <- adaptive_filter(noisy_ecg_signal, base_order = 3, adaptivity_factor = 2)
# Visualisation du signal filtré
ggplot() +
geom_line(aes(x = time, y = noisy_ecg_signal), color = "red", alpha = 0.5, linetype = "dashed") +
geom_line(aes(x = time, y = filtered_signal), color = "blue") +
labs(title = "Filtrage Adaptatif d'un Signal ECG avec les Polynômes de Laguerre",
x = "Temps", y = "Amplitude") +
theme_minimal()
# Approximation du signal en utilisant une série de Laguerre
approximate_signal <- function(signal, max_order) {
n <- length(signal)
approximation <- numeric(n)
for (i in 1:n) {
x <- i / n
for (k in 0:max_order) {
laguerre_value <- sum(Laguerre_poly(k, x))
approximation[i] <- approximation[i] + signal[i] * laguerre_value
}
}
return(approximation)
}
# Approximation de l'ECG bruité avec des polynômes de Laguerre
approx_signal <- approximate_signal(noisy_ecg_signal, max_order = 5)
# Visualisation
ggplot() +
geom_line(aes(x = time, y = noisy_ecg_signal), color = "red", alpha = 0.5, linetype = "dashed") +
geom_line(aes(x = time, y = approx_signal), color = "blue") +
labs(title = "Approximation d'un Signal ECG avec une Série de Laguerre",
x = "Temps", y = "Amplitude") +
theme_minimal()
devtools::load_all()
devtools::load_all()
devtools::load_all()
rm(list = ls())
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
rm(list = ls())
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::load_all()
install.packages("usethis")
library(usethis)
usethis::use_git()
usethis::use_git()
